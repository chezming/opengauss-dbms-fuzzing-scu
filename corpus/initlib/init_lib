CREATE TABLE t0 ( c0 INT UNSIGNED NOT NULL) ;
CREATE TABLE t0 ( c0 DOUBLE ( 1 , 1) VISIBLE ) ;
CREATE TABLE t0 ( c0 DECIMAL ( 1 ) DEFAULT ( 1 ) ) ;
CREATE TABLE t0 ( c0 BOOL ) ;
CREATE TABLE t0 ( c0 CHAR ) ;
CREATE TABLE t0 ( c0 INT , INDEX i0 ( c0 ASC ) ) ;
CREATE TABLE t0 ( c0 TEXT , INDEX i0 ( c0 ( 1 ) ) ) ;
CREATE TABLE t0 ( c0 INT , INDEX i0 ( ( c0 + 1 ) ) ) ;
CREATE TABLE t0 ( c0 INT , CONSTRAINT cc0 UNIQUE i0 ( c0 ) ) ;
CREATE TABLE t0 ( c0 INT , CONSTRAINT cc0 CHECK ( c0 = 1 ) ) ;
CREATE TABLE t0 ( c0 INT , c1 INT , UNIQUE ( c1 ) , CONSTRAINT cc0 FOREIGN KEY i0 ( c0 ) REFERENCES t0 ( c1 ) ON UPDATE CASCADE ON DELETE CASCADE ) ;
CREATE TABLE t0 REPLACE AS SELECT 1 ;
CREATE OR REPLACE ALGORITHM = TEMPTABLE VIEW v0 ( c0 , c1 ) AS SELECT 1 , 2 ;
CREATE UNIQUE INDEX i0 ON t0 ( c0 ) ;
DROP INDEX i0 ON t0 ;
DROP TABLE IF EXISTS t0 , t1 ;
DROP VIEW IF EXISTS v0 , v1 ;
DELETE QUICK FROM t0 LIMIT 1 ;
DELETE t0 FROM t0 ;
UPDATE t0 SET c0 = 1 ;
INSERT INTO t0 ( c0 ) VALUES ( 1 ) AS t1 ( c1 ) ON DUPLICATE KEY UPDATE c0 = 1 ;
INSERT INTO t0 SET c0 = 1 ;
INSERT INTO t0 ( c1 ) SELECT 1 ;
ALTER TABLE t0 ADD COLUMN c1 INT AFTER c0 ;
ALTER TABLE t0 ADD COLUMN ( c1 INT , UNIQUE ( c1 ) ) ;
ALTER TABLE t0 ADD UNIQUE ( c0 ) ;
ALTER TABLE t0 CHANGE COLUMN c0 c1 INT ;
ALTER TABLE t0 MODIFY COLUMN c0 INT FIRST;
ALTER TABLE t0 DROP COLUMN c0 ;
ALTER TABLE t0 DROP FOREIGN KEY cc0 ;
ALTER TABLE t0 DROP PRIMARY KEY ; 
ALTER TABLE t0 DROP INDEX i0 ;
ALTER TABLE t0 DROP CHECK cc0 ;
ALTER TABLE t0 DROP CONSTRAINT cc0 ;
ALTER TABLE t0 ALTER COLUMN c0 SET DEFAULT ( 1 ) ;
ALTER TABLE t0 ALTER COLUMN c0 DROP DEFAULT ;
ALTER TABLE t0 ALTER COLUMN c0 SET INVISIBLE ;
ALTER TABLE t0 ALTER INDEX i0 INVISIBLE ;
ALTER TABLE t0 RENAME TO t1 ;
ALTER TABLE t0 RENAME INDEX i0 TO i1 ;
ALTER TABLE t0 RENAME COLUMN c0 TO c1 ;
SELECT c0 FROM t0 ORDER BY c0 LIMIT 1 ;
( SELECT c0 FROM t0 ) ORDER BY c0 LIMIT 1 ;
SELECT c0 FROM t0 UNION SELECT c0 FROM t0 ;
SELECT SQL_NO_CACHE c0 AS c1 FROM ( SELECT c0 FROM t0 ) AS t1 ( c2 ) WHERE c1 = 0 GROUP BY c1 HAVING c1 = 0 ;
SELECT c0 FROM t0 WINDOW w0 AS ( PARTITION BY c0  RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING ) ;
SELECT t0 . c0 FROM ( t0 CROSS JOIN t0 AS t1 ) ;
SELECT t0 . c0 FROM ( t0 , t0 AS t1 ) ;
SELECT t0 . c0 FROM t0 INNER JOIN t0 AS t1 ON t0 . c0 = t1 . c0 ;
SELECT t0 . c0 FROM t0 INNER JOIN t0 AS t1 USING ( c0 ) ;
SELECT t0 . c0 FROM t0 INNER JOIN t0 AS t1 ;
SELECT t0 . c0 FROM t0 LEFT OUTER JOIN t0 AS t1 ON t0 . c0 = t0 . c1 ;
SELECT t0 . c0 FROM t0 NATURAL INNER JOIN t0 AS t1 ;
WITH t1 ( c1 ) AS ( SELECT 1 ) SELECT c1 FROM t1 ;
WITH RECURSIVE t1 ( c1 ) AS ( SELECT 1 UNION SELECT c1 + 1 FROM t1 WHERE c1 < 10 ) SELECT c1 FROM t1 ;
SELECT * FROM t0 ;
SELECT c0 = ( SELECT c0 FROM t0 LIMIT 1 ) FROM t0 ;
SELECT c0 = ALL ( SELECT c0 FROM t0 ) FROM t0 ;
SELECT c0 IN ( SELECT c0 FROM t0 ) FROM t0 ;
SELECT TRUE ;
SELECT 1 ;
SELECT 1.1 ;
SELECT 'string' ;
SELECT CAST ( c0 AS UNSIGNED ) FROM t0 ;
SELECT CONVERT ( c0 , UNSIGNED ) FROM t0 ;
SELECT CASE c0 WHEN 1 THEN 1 ELSE 2 END FROM t0 ;
SELECT DEFAULT ( c0 ) FROM t0 ;
SELECT IF ( c0 , c0 , 1 ) FROM t0 ;
SELECT IFNULL ( c0 , 1 ) FROM t0 ;
SELECT NULLIF ( c0 , 1 ) FROM t0 ;
SELECT PI ( ) ;
SELECT RAND ( ) ;
SELECT ABS ( c0 ) FROM t0 ;
SELECT ACOS ( c0 ) FROM t0 ;
SELECT ASIN ( c0 ) FROM t0 ;
SELECT ATAN ( c0 ) FROM t0 ;
SELECT CEILING ( c0 ) FROM t0 ;
SELECT COS ( c0 ) FROM t0 ;
SELECT COT ( c0 ) FROM t0 ;
SELECT DEGREES ( c0 ) FROM t0 ;
SELECT EXP ( c0 ) FROM t0 ;
SELECT FLOOR ( c0 ) FROM t0 ;
SELECT HEX ( c0 ) FROM t0 ;
SELECT LN ( c0 ) FROM t0 ;
SELECT RADIANS ( c0 ) FROM t0 ;
SELECT RAND ( c0 ) FROM t0 ;
SELECT ROUND ( c0 ) FROM t0 ;
SELECT SIGN ( c0 ) FROM t0 ;
SELECT SIN ( c0 ) FROM t0 ;
SELECT SQRT ( c0 ) FROM t0 ;
SELECT TAN ( c0 ) FROM t0 ;
SELECT ATAN ( 1 , 1 );
SELECT FORMAT ( 1 , 1 );
SELECT LOG ( 1 , 1 );
SELECT MOD ( 1 , 1 );
SELECT POW ( 1 , 1 );
SELECT ROUND ( 1 , 1 );
SELECT TRUNCATE ( 1 , 1 );
SELECT CONV ( 1 , 1 , 1 ) ;
SELECT ASCII ( c0 ) FROM t0 ;
SELECT BIN ( c0 ) FROM t0 ;
SELECT BIT_LENGTH ( c0 ) FROM t0 ;
SELECT CHAR_LENGTH ( c0 ) FROM t0 ;
SELECT LENGTH ( c0 ) FROM t0 ;
SELECT LOWER ( c0 ) FROM t0 ;
SELECT LTRIM ( c0 ) FROM t0 ;
SELECT OCT ( c0 ) FROM t0 ;
SELECT ORD ( c0 ) FROM t0 ;
SELECT QUOTE ( c0 ) FROM t0 ;
SELECT REVERSE ( c0 ) FROM t0 ;
SELECT RTRIM ( c0 ) FROM t0 ;
SELECT SPACE ( c0 ) FROM t0 ;
SELECT TRIM( c0 ) FROM t0 ;
SELECT TRIM( LEADING FROM c0 ) FROM t0 ;
SELECT TRIM( TRAILING FROM c0 ) FROM t0 ;
SELECT UNHEX ( c0 ) FROM t0 ;
SELECT UPPER ( c0 ) FROM t0 ;
SELECT FIND_IN_SET ( c0 , 'str' ) FROM t0 ;
SELECT INSTR ( c0 , 'str' ) FROM t0 ;
SELECT LEFT ( c0 , 'str' ) FROM t0 ;
SELECT LOCATE ( c0 , 'str' ) FROM t0 ;
SELECT REPEAT ( c0 , 'str' ) FROM t0 ;
SELECT RIGHT ( c0 , 'str' ) FROM t0 ;
SELECT SUBSTRING( c0 , 'str' ) FROM t0 ;
SELECT TRIM( LEADING c0 FROM 'str' ) FROM t0 ;
SELECT TRIM( TRAILING c0 FROM 'str' ) FROM t0 ;
SELECT TRIM( c0 FROM 'str' ) FROM t0 ;
SELECT EXPORT_SET ( c0 , 'str' , 'str' ) FROM t0 ;
SELECT LOCATE ( c0 , 'str' , 'str' ) FROM t0 ;
SELECT LPAD ( c0 , 'str' , 'str' ) FROM t0 ;
SELECT REPLACE ( c0 , 'str' , 'str' ) FROM t0 ;
SELECT RPAD ( c0 , 'str' , 'str' ) FROM t0 ;
SELECT SUBSTRING( c0 , 'str' , 'str' ) FROM t0 ;
SELECT SUBSTRING_INDEX ( c0 , 'str' , 'str' ) FROM t0 ;
SELECT EXPORT_SET ( c0 , 'str' , 'str' , 'str' ) FROM t0 ;
SELECT INSERT ( c0 , 'str' , 'str' , 'str' ) FROM t0 ;
SELECT EXPORT_SET ( c0 , 'str' , 'str' , 'str' , 'str' ) FROM t0 ;
SELECT CHAR ( c0 , 'str' ) FROM t0 ;
SELECT CONCAT ( c0 , 'str' ) FROM t0 ;
SELECT CONCAT_WS ( c0 , 'str' , 'str' ) FROM t0 ;
SELECT ELT ( c0 , 'str' , 'str' ) FROM t0 ;
SELECT FIELD ( c0 , 'str' , 'str' ) FROM t0 ;
SELECT MAKE_SET ( c0 , 'str' , 'str' ) FROM t0 ;
SELECT AVG ( c0 ) FROM t0 ;
SELECT BIT_AND( c0 ) FROM t0 ;
SELECT BIT_OR( c0 ) FROM t0 ;
SELECT BIT_XOR( c0 ) FROM t0 ;
SELECT COUNT( * ) FROM t0 ;
SELECT COUNT( c0 ) FROM t0 ;
SELECT COUNT( DISTINCT c0 , 1 ) FROM t0 ;
SELECT MIN( c0 ) FROM t0 ;
SELECT MAX( c0 ) FROM t0 ;
SELECT SUM( c0 ) FROM t0 ;
SELECT STD( c0 ) FROM t0 ;
SELECT STDDEV_SAMP( c0 ) FROM t0 ;
SELECT VARIANCE( c0 ) FROM t0 ;
SELECT VAR_SAMP( c0 ) FROM t0 ;
SELECT GROUP_CONCAT( c0 , 1 ORDER BY c0 SEPARATOR ',' ) FROM t0 ;
SELECT ROW_NUMBER ( ) OVER w0 FROM t0 WINDOW w0 AS ( PARTITION BY c0 ) ;
SELECT RANK ( ) OVER ( PARTITION BY c0 ) FROM t0 ;
SELECT DENSE_RANK ( ) OVER w0 FROM t0 WINDOW w0 AS ( PARTITION BY c0 ) ;
SELECT CUME_DIST ( ) OVER w0 FROM t0 WINDOW w0 AS ( PARTITION BY c0 ) ;
SELECT PERCENT_RANK ( ) OVER w0 FROM t0 WINDOW w0 AS ( PARTITION BY c0 ) ;
SELECT NTILE ( 1 ) OVER w0 FROM t0 WINDOW w0 AS ( PARTITION BY c0 ) ;
SELECT LEAD ( c0 , 1 ) OVER w0 FROM t0 WINDOW w0 AS ( PARTITION BY c0 ) ;
SELECT LAG ( c0 , 1 ) OVER w0 FROM t0 WINDOW w0 AS ( PARTITION BY c0 ) ;
SELECT FIRST_VALUE ( c0 ) OVER w0 FROM t0 WINDOW w0 AS ( PARTITION BY c0 ) ;
SELECT LAST_VALUE ( c0 ) OVER w0 FROM t0 WINDOW w0 AS ( PARTITION BY c0 ) ;
SELECT NTH_VALUE ( c0 , 1 ) FROM FIRST RESPECT NULLS OVER w0 FROM t0 WINDOW w0 AS ( PARTITION BY c0 ) ;
SELECT 1 IN ( 1 , 2 , 3) ;
SELECT 1 NOT IN ( 1 , 2 , 3) ;
SELECT 1 BETWEEN 1 AND 2 ;
SELECT 1 NOT BETWEEN 1 AND 2 ;
SELECT 1 FROM t0 LEFT OUTER JOIN t1 USING ( c0 ) ;